The following are derived from the Readme.txt
********************************************************
Let's say we decide to implement a new class called Player that will be based on the Dexter class that was provided.
A Player needs to have:
-* (maybe) implement the Serializable marker interface so that it can move between JVMs, Dexter does so as well - Player extends Dexter, so this will be done by default
-* an enum with values 'it' and 'not it'
-* the Player must have a unique id ( so that they can distinguish them selves from others and tell who is who ) maybe of type java.util.UUID
-* needs to be able to communicate with the Bailiff to check for other players in the same Bailiff
-* needs to be able to check if other players are 'it'
-* needs to be able to try to make other players 'it' ( only when they are on the same Bailiff )
- the 'it' property must not get lost when a Player is trying to transfer it ( a copy is made and then the 
original is destroyed, it needs to not be tagged when destroyed or to take the tag with it )
- the 'it' player needs to find Bailiffs with other (or max) Players
- the 'not it' players need to avoid the Bailiffs with the 'it' Player

Strongly Advised:
- It is strongly advised that communication between players use the Bailiff as a proxy. 
The central message between players in the game of Tag is of course the tagging action itself. ( example provided in readme )

Optional:
-Bailiff can have some additional information beside player id:s; for example, 'this is you' and 'this player currently 
is it'. That would reduce the number of additional remote method calls that a player otherwise would have to make.
-* Bailiff can contain a predicate/variable that indicate if the 'it' player is there
- The variable that checks if 'it' is in the Bailiff needs to get updated consistently.
